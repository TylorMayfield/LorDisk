name: Release LorDisk

on:
  release:
    types: [published]

env:
  NODE_VERSION: "18"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Build Windows executable
        run: npm run electron:build:win
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: dist/*.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Build macOS app
        run: npm run electron:build:mac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: dist/*.dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Build Linux app
        run: npm run electron:build:linux
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: dist/*.AppImage

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release Assets
        run: |
          mkdir -p release-assets

          # Copy all built files
          find artifacts -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" | while read file; do
            cp "$file" release-assets/
          done

          # Create platform-specific zip files
          cd release-assets

          # Windows
          if ls *.exe 1> /dev/null 2>&1; then
            zip -r LorDisk-Windows-x64.zip *.exe
          fi

          # macOS
          if ls *.dmg 1> /dev/null 2>&1; then
            zip -r LorDisk-macOS-universal.zip *.dmg
          fi

          # Linux
          if ls *.AppImage 1> /dev/null 2>&1; then
            zip -r LorDisk-Linux-x64.zip *.AppImage
          fi

          # Create universal zip
          cd ..
          zip -r LorDisk-All-Platforms.zip release-assets/

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-assets/LorDisk-Windows-x64.zip
          asset_name: LorDisk-Windows-x64.zip
          asset_content_type: application/zip

      - name: Upload macOS Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-assets/LorDisk-macOS-universal.zip
          asset_name: LorDisk-macOS-universal.zip
          asset_content_type: application/zip

      - name: Upload Linux Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-assets/LorDisk-Linux-x64.zip
          asset_name: LorDisk-Linux-x64.zip
          asset_content_type: application/zip

      - name: Upload Universal Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./LorDisk-All-Platforms.zip
          asset_name: LorDisk-All-Platforms.zip
          asset_content_type: application/zip
